<?php
/*************************************************************
 *
 * Hosting Module Class - Zabbix
 * 
 * http://dev.hostbillapp.com/dev-kit/provisioning-modules/
 * http://wiki.hostbillapp.com/index.php?title=Custom_Modules#Examples
 * http://wiki.hostbillapp.com/index.php?title=Hosting_Modules
 * http://hostbillapp.com/features/
 * http://wiki.hostbillapp.com/index.php?title=HostBill_Plugins
 * 
 * 
 ************************************************************/

// Load Hostbill Api
include_once("include/api/class.hostbill.api.php");

// Load Zabbix Api
include_once("include/api/class.zabbix.api.php");

class zabbix extends HostingModule {

	private $server_hostname;
    private $server_username;
    private $server_password;

	// Extras >> Plugins >> Hosting Modules
	// Module name
	protected $modname = "Zabbix";
	
	// Extras >> Search results
	// Description module
	protected $description = "Zabbix integration with HostBill. Additionally trough client functions it allows to browse usage graphs generated by Zabbix.";
	
	
	// Settings >> Products && Services
    // Connect with App
	protected $options = array();
	
	
	/**
    * You can choose which fields to display in Settings->Apps section
    * by defining this variable
    * @var array
    */
	protected $serverFields = array(
        "hostname" => true,
        "ip" => false,
        "maxaccounts" => false,
        "status_url" => false,
        "username" => true,
        "password" => true,
        "hash" => false,
        "ssl" => false,
        "nameservers" => false
    );
    
    /**
      * HostBill will replace default labels for server fields
      * with this variable configured
      * @var array
      */
    protected $serverFieldsDescription = array(
        "hostname" => "Zabbix Api",
        "username" => "Username",
        "password" => "Password"
    );
    

	/**
     * HostBill will call this method before calling any other function from your module
     * It will pass remote  app details that module should connect with
     *
     * @param array $connect Server details configured in Settings->Apps
     */
    public function connect($connect) {
    	
    	$this->server_hostname = (isset($connect["host"])) ? $connect["host"] : "";
    	$this->server_username = (isset($connect["username"])) ? $connect["username"] : "";
        $this->server_password = (isset($connect["password"])) ? $connect["password"] : "";
        
    }
    
    
    /**
     * HostBill will call this method when admin clicks on "test Connection" in settings->apps
     * It should test connection to remote app using details provided in connect method
     *
     * Use $this->addError('message'); to provide errors details (if any)
     *
     * http://xxx.xxx.xxx.xxx/public_html/admin/index.php?cmd=servers&action=test_connection
     * 
     * @see connect
     * @return boolean true if connection suceeds
     */
    public function testConnection() {
        $res = false;
        
    	try {
    		$res = ZabbixApi::singleton()->_connect($this->server_hostname, $this->server_username, $this->server_password);
    	} catch (Exception $e) {
    		$this->addError($e->getMessage());
        }
        
        // Replace server_hostname, server_username, server_passs to hook files
    	
        return $res;
    }
	
    
    
    
    
    /**
     * This method is invoked automatically when creating an account.
     * @return boolean true if creation succeeds
     */
    public function Create() {
    	
    	// Flow
    	// 1. Create User Zabbix Group User In "Free Monitoring"
    	// 2. Create Host SNMP Group Host in "Host Group Free Monitoring"
    	// 3. Create Item Graph Traffic IN, OUT
    	// 4. Create Graph SNMP
    	// 5. Create Discovery Rule
    	// 6. Create Action Discovery
    	// 7. Create Item Trigger Traffic IN, OUT
    	// 8. Cretae Trigger Traffic IN, OUT
    	// 9. Create Action Traffic IN, OUT
    	
    	
    	$complete = "1";
        $message = "";
    	    	
    	try {
            
    		// TODO validate variable if null then throw exceptions
    		if (isset($this->server_hostname) && isset($this->server_username) && isset($this->server_password)
    		      && isset($this->account_details["client_id"])) {
    			
    		} else {
    			throw new Exception("Variables some thing missing.");
    		}
    		
    		
    		// Start. Hook Replace Info Zabbix
    		$hookPath = APPDIR . "extend/hooks/";
    		$aHookFiles = array(
    		      "after_clientedit_01.php",
    		      "before_clientdelete_01.php"
    		);
    		
    		$server_hostname = $this->server_hostname;
    		$server_username = $this->server_username;
    		$server_password = $this->server_password;
    		
    		for ($i=0;$i<count($aHookFiles);$i++) {
    		     
    			$fileHook = $hookPath . $aHookFiles[$i];
    			if (is_file($hookPath . $aHookFiles[$i])) {
    				$content = file_get_contents($fileHook);
    				
    				$pattern = '/\$zabbixHost\s*=\s*"(.*?)";/';
		            $replace = "\$zabbixHost = \"$server_hostname\";";
		            $content = preg_replace($pattern, $replace, $content);
		            
		            $pattern = '/\$zabbixUser\s*=\s*"(.*?)";/';
		            $replace = "\$zabbixUser = \"$server_username\";";
		            $content = preg_replace($pattern, $replace, $content);
		            
		            $pattern = '/\$zabbixPass\s*=\s*"(.*?)";/';
		            $replace = "\$zabbixPass = \"$server_password\";";
		            $content = preg_replace($pattern, $replace, $content);
		            
		            $fileHandle = fopen($fileHook, 'w');
		            fwrite($fileHandle, $content);
		            fclose($fileHandle);
    				
    			}
    		}    		
    		
    		
    		
    		// 0. Zabbix Connect
    		$api = ZabbixApi::singleton();
            $api->_connect($this->server_hostname, $this->server_username, $this->server_password);
    		

            // 1. Create User Zabbix Group User In "Free Monitoring"
            $aParams = array();
            
            // Set Group User
            $aParams['groupuser']['groupname'] = "Free Monitoring";
            $aParams['groupuser']['username'] = (isset($this->account_details["client_id"])) ? $this->account_details["client_id"] : null;
            $aParams['groupuser']['sendto'] = (isset($this->client_data["email"])) ? $this->client_data["email"] : null;
            //$api->rvcustomDoHostbillCreateNetworkTraffic($aParams);
            
/*            
    		// 1. Create User Zabbix Group User In "Free Monitoring"
    		$userName = (isset($this->account_details["client_id"])) ? $this->account_details["client_id"] : null;
    		// TODO check free, no free
    		$usergroupID = $api->getUserGroupIdByGroupName();
    		$sendto = (isset($this->client_data["email"])) ? $this->client_data["email"] : null;
    		
    		if ($api->isUserNameExists($userName)) {
    			$this->addInfo("user " . $userName . " alias " .  $sendto . " already exists.");
    		} else {
    			
    			if (isset($userName) && isset($usergroupID) && isset($sendto)) {
    				$api->doUserCreate($userName, $usergroupID, $sendto);
                    $this->addInfo("user create " . $userName .  " alias " .  $sendto . " success.");
    			} else {
    				throw new Exception("Cannot create user.");
    			}
    			
    		}
    		
*/
    		
    		// TODO create group by server
    		// find server by account id
    		
    	    		
    		$accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;
    		$aServer = array();
    		
    		
    		if (isset($accountId)) {
                $aServer = HostbillApi::singleton()->getServerByAccountId($accountId);
                
                if (count($aServer) > 0) {
                    for ($i=0;$i<count($aServer);$i++) {
                        
                        if (isset($aServer[$i]["ip"]) && isset($aServer[$i]["username"])) {

                            // Set Host Group 
                           $aParams['hostgroup']['groupname'][$i] = $aServer[$i]["ip"];
                           
                           // Set Host
//                           $prefix = ($i == 0) ? "" : "-" . $i;
//                           $aParams['host']['name'][$i] = $this->account_details["domain"] . $prefix;
//                           $aParams['host']['visible'][$i] = $this->account_details["domain"] . $prefix;
//                           $aParams['host']['interfaceip'][$i] = $aServer[$i]["ip"];
//                           $aParams['host']['group'] = "Host Group Free Monitoring";
                           
                        }
                    }
                }
    		}
    		
    		
    		// Create Network Traffic
            $api->rvcustomDoHostbillCreateNetworkTraffic($aParams);
    		
    		
    		
    		if (isset($accountId)) {
    		    $aServer = HostbillApi::singleton()->getServerByAccountId($accountId);
    		    
    		    if (count($aServer) > 0) {
    		    	for ($i=0;$i<count($aServer);$i++) {
    		    		
    		    		if (isset($aServer[$i]["ip"]) && isset($aServer[$i]["username"])) {

    		    		    // Set Host Group 
//                           $aParams['hostgroup']['groupname'][$i] = $aServer[$i]["ip"]; 
                           
                           // Set Host
//                           $prefix = ($i == 0) ? "" : "-" . $i;
//                           $aParams['host']['name'][$i] = $this->account_details["domain"] . $prefix;
//                           $aParams['host']['visible'][$i] = $this->account_details["domain"] . $prefix;
//                           $aParams['host']['interfaceip'][$i] = $aServer[$i]["ip"];
//                           $aParams['host']['group'] = "Host Group Free Monitoring";
                           
    		    		    
    		    			// 2.0.1 CREATE HOST GROUP
    		    			$hostGroupName = $aServer[$i]["ip"];
//    		    			if ($api->isHostGroupExists($hostGroupName)) {
//    		    				$this->addInfo("hostgroup " . $hostGroupName . " already exists.");
//    		    			} else {
//    		    				$api->doHostGroupCreate($hostGroupName);
//    		    				$this->addInfo("hostgroup create " . $hostGroupName .  " success.");
//    		    			}
    		    			
    		    			
    		    			// 2.0.2 Create Host SNMP
    		    			$interfaceIP = $hostGroupName;
    		    			
    		    			$aHostGroupId = array(
    		    			   array(
    		    			       // check free no free
    		    			       "groupid" => $api->getHostGroupIdByGroupName()
    		    			   ),
    		    			   array(
    		    			       "groupid" => $api->getHostGroupIdByGroupName($hostGroupName)
    		    			   )
    		    			);
    		    			
    		    			$prefix = ($i == 0) ? "" : "-" . $i;
                            $hostName = $this->account_details["domain"] . $prefix;
                            $hostVisible = $this->account_details["domain"] . $prefix;  
                            
    		    			
                            if ($api->isHostExists($hostVisible)) {
                            	$this->addInfo("host " . $hostVisible . " already exists.");
                            } else {
                            	$api->doHostCreateSNMP($hostName, $hostVisible, $aHostGroupId, $interfaceIP);
                            	$this->addInfo("host create" . $hostVisible . " success.");
                            }

    		    			
                            
                            
                            // 3. Create Item Graph Traffic IN, OUT
                            $aPortSwitch = HostbillApi::singleton()->getPortSwitchByAccountId($accountId);
                            if (count($aPortSwitch) > 0) {
                            	for ($j=0;$j<count($aPortSwitch);$j++) {
                            		
                            		if (isset($aPortSwitch[$j]["item_id"]) && isset($aServer[$i]["item_id"]) 
                            		      && isset($aPortSwitch[$j]["port_id"]) && isset($aPortSwitch[$j]["port_name"])) {
                            			                            		      	
                            		      if ($aPortSwitch[$j]["item_id"] == $aServer[$i]["item_id"]) {
	                                        $portID = $aPortSwitch[$j]["port_id"];
	                                        $itemName = $accountId . "-network-traffic-incoming-port-" . $portID;
	                                        $itemKey = $itemName;
	                                        $hostID = $api->getHostIdByHostName($hostName);
	                                        
	                                        $interfaceID = $api->getHostInterfaceIdByHostId($hostID);
	                                        $snmpOID = "interfaces.ifTable.ifEntry.ifInOctets." . $portID;
	                                        $snmpCommunity = $aServer[$i]["username"];
	                                        
	                                        
	                                        
	                                        if (isset($interfaceID) && isset($snmpCommunity) && isset($snmpOID)) {
	                                        	
	                                           
	                                        	// ITEM INCOMING GRAPH
	                                        	if ($api->isItemKeyExists($hostName, $itemKey)) {
	                                        		$this->addInfo("item " . $itemName . " already exists.");
	                                        	} else {
	                                        		$api->doItemCreateGraphNetworkTraffic($itemName, $hostID, $interfaceID, $snmpCommunity, $snmpOID);
	                                        		$this->addInfo("item create" . $itemName . " success.");
	                                        	}
	                                        	
	                                            
	                                            // ITEM OUTGOING GRAPH
	                                            $itemName = $accountId . "-network-traffic-outgoing-port-" . $portID;
	                                            $itemKey = $itemName;
	                                            $snmpOID = "interfaces.ifTable.ifEntry.ifOutOctets." . $portID;
	                                            
	                                            if ($api->isItemKeyExists($hostName, $itemKey)) {
	                                            	$this->addInfo("item " . $itemName . " already exists.");
	                                            } else {
	                                            	$api->doItemCreateGraphNetworkTraffic($itemName, $hostID, $interfaceID, $snmpCommunity, $snmpOID);
	                                            	$this->addInfo("item create" . $itemName . " success.");
	                                            }
	                                            
	                                            // 7. Create Item Trigger Traffic IN, OUT
	                                             // ITEM INCOMING TRIGGER
                                                $itemName = $accountId . ".net.if.in." . $portID;
                                                $itemKey = $itemName;
                                                $snmpOID = "interfaces.ifTable.ifEntry.ifInOctets." . $portID;
                                               if ($api->isItemKeyExists($hostName, $itemKey)) {
                                               	    // TODO $api->doActionUpdateStatus($actionId, "0");
                                                    $this->addInfo("item " . $itemName . " already exists.");
                                                } else {
                                                    $api->doItemCreateTriggerNetworkTraffic($itemName, $hostID, $interfaceID, $snmpCommunity, $snmpOID);
                                                    $this->addInfo("item create" . $itemName . " success.");
                                                }
                                                
                                                
	                                            // ITEM OUTGOING TRIGGER
                                                $itemName = $accountId . ".net.if.out." . $portID;
                                                $itemKey = $itemName;
                                                $snmpOID = "interfaces.ifTable.ifEntry.ifOutOctets." . $portID;
                                               if ($api->isItemKeyExists($hostName, $itemKey)) {
                                               	    // TODO $api->doActionUpdateStatus($actionId, "0");
                                                    $this->addInfo("item " . $itemName . " already exists.");
                                                } else {
                                                    $api->doItemCreateTriggerNetworkTraffic($itemName, $hostID, $interfaceID, $snmpCommunity, $snmpOID);
                                                    $this->addInfo("item create" . $itemName . " success.");
                                                }
                                                
                                                
	                                            
	                                            
	                                            // 4. Create Graph SNMP IN/OUT
	                                            $graphName = $accountId ." Network Traffic " . $portID;
	                                            
	                                            if ($api->isGraphNameExists($hostName, $graphName)) {
	                                            	
	                                            	$this->addInfo("graph " . $graphName . " already exists.");
	                                            	
	                                            } else {
		                                            $aItem = $api->getItemByHostIdByItemKey($hostID, "-port-" . $portID);
	                                                if (count($aItem) > 0) {
	                                                    if (isset($aItem["0"]->itemid) && isset($aItem["1"]->itemid)) {
	                                                        
	                                                       $api->doGraphCreateNetworkTraffic($graphName , $aItem["0"]->itemid, $aItem["1"]->itemid);
	                                                        
	                                                    }
	                                                }
	                                                
	                                                $this->addInfo("graph create" . $graphName . " success.");
	                                            }
	                                            
                                                
                                                
	                                            
	                                            // 8. Cretae Trigger Traffic IN, OUT
	                                            // 9. Create Action Traffic IN, OUT
	                                            
	                                            // TRIGGER INCOMING 
	                                            $descriptionName = $accountId . "-trigger-network-traffic-incoming-" . $portID . $prefix;
	                                            if ($api->IsTriggerExists($descriptionName)) {
	                                            	$this->addInfo("trigger " . $descriptionName . " already exists.");
	                                            } else {
	                                            	$api->doTriggerCreateNetworkTrafficIncoming($accountId, $hostName, $descriptionName, $portID);
	                                            	$this->addInfo("trigger create " . $descriptionName . " success.");
	                                            }
	                                            
	                                            
	                                            // ACTION TRIGGER INCOMING
	                                            $triggerId = $api->getTriggerIdByDescription($descriptionName);
	                                            $userId = $api->getUserIdByUserAlias("Admin");
	                                            if (isset($triggerId) && isset($userId)) {
	                                            	$actionName = "action-" . $descriptionName;
	                                            	
	                                            	if ($api->isActionNameExists($actionName)) {
	                                            		
	                                            	    $this->addInfo("action " . $actionName . " already exists.");
                                                        $actionId = $api->getActionIdByActionName($actionName);
						                                if (isset($actionId)) {
						                                   $api->doActionUpdateStatus($actionId, "0");
						                                   $this->addInfo("action " . $actionName . " enable.");
						                                }
						                                
	                                            	} else {
	                                            		$api->doActionCreateNetworkTraffic($actionName, $triggerId, $userId);
	                                            		$this->addInfo("action create " . $actionName . " success.");
	                                            	}
	                                            	
	                                            }
	                                            
	                                            
	                                            // TRIGGER OUTGOING
	                                            $descriptionName = $accountId . "-trigger-network-traffic-outgoing-" . $portID . $prefix;
	                                            if ($api->IsTriggerExists($descriptionName)) {
	                                            	$this->addInfo("trigger " . $descriptionName . " already exists.");
	                                            } else {
	                                            	$api->doTriggerCreateNetworkTrafficOutgoing($accountId, $hostName, $descriptionName, $portID);
	                                            	$this->addInfo("trigger create " . $descriptionName . " success.");
	                                            }
	                                            
	                                            
	                                             // ACTION TRIGGER OUTGOING
	                                            $triggerId = $api->getTriggerIdByDescription($descriptionName);
	                                            if (isset($triggerId) && isset($userId)) {
                                                    $actionName = "action-" . $descriptionName;
                                                    if ($api->isActionNameExists($actionName)) {
                                                    	
                                                        $this->addInfo("action " . $actionName . " already exists.");
                                                        $actionId = $api->getActionIdByActionName($actionName);
                                                        if (isset($actionId)) {
                                                           $api->doActionUpdateStatus($actionId, "0");
                                                           $this->addInfo("action " . $actionName . " enable.");
                                                        }
                                                    	
                                                    } else {
                                                    	$api->doActionCreateNetworkTraffic($actionName, $triggerId, $userId);
                                                    	$this->addInfo("action create " . $actionName . " success.");
                                                    }
                                                }
	                                            
	                                            
                                                
                                                
                                                
	                                            
	                                            
	                                        	
	                                        	
	                                        }
	                                        
	                                        
	                                        
	                                        
	                                    }
                            		}
                            		
                            		
                            	}
                            }
                            
                            
                            
    		    			
    		    		}
    		    		
    		    	}
    		    }
    		    
    		    
    		    
    		    
    		    
    		    
    		    // 5. Create Discovery Rule
    		    // 6. Create Action Discovery
    		    $aParams = array();
                $aParams['ipaddress'] = HostbillApi::singleton()->getIpByAccountId($accountId);
                $aParams['sendto'] = (isset($this->client_data["email"])) ? $this->client_data["email"] : null;;
                $api->rvcustomDoHostbillCreateDiscovery($aParams);
    		    
    		    /*
    		    $aIpAddress = HostbillApi::singleton()->getIpByAccountId($accountId);
    		    if (count($aIpAddress) > 0) {
    		    	for ($i=0;$i<count($aIpAddress);$i++) {
    		    		if (isset($aIpAddress[$i]) && $aIpAddress[$i] != "") {
    		    			
    		    			// 5. Create Discovery Rule
    		    			
    		    			// RULE UP/DOWN
    		    			$dRuleName = $aIpAddress[$i] . " Up Down";
    		    			if ($api->isDruleNameExists($dRuleName)) {
    		    				$this->addInfo("discovery rule " . $dRuleName . " already exists.");
    		    			} else {
    		    				$api->doDiscoveryRuleCreateUpDown($dRuleName, $aIpAddress[$i]);
    		    				$this->addInfo("discovery rule " . $dRuleName . " success.");
    		    			}
    		    			
    		    			
    		    			// 6. Create Action Discovery
    		    			
    		    			// ACTION
                            $discoveryID = $api->getDiscoveryRuleIdByDiscoveryName($dRuleName);
                            $discoveryCheckID = $api->getDiscoveryCheckIdByDiscoveryId($discoveryID);
                            $userAlias = $sendto;
                            $userID = $api->getUserIdByUserAlias($userAlias);
                            
                            // ACTION DOWN
                            $actionName = $aIpAddress[$i] . " Action Lost Down";
                            if ($api->isActionNameExists($actionName)) {
                            	$this->addInfo("action " . $actionName . " already exists.");
	                            $actionId = $api->getActionIdByActionName($actionName);
	                             if (isset($actionId)) {
	                                $api->doActionUpdateStatus($actionId, "0");
	                                $this->addInfo("action " . $actionName . " enable.");
	                             }
                            } else {
                            	$api->doActionCreateLostDown($aIpAddress[$i], $discoveryCheckID, $userID);
                            	$this->addInfo("action create " . $actionName . " success.");
                            }
                            
            
				            // ACTION UP
				            $actionName = $aIpAddress[$i] . " Action Discovered Up";
				            if ($api->isActionNameExists($actionName)) {
				                $this->addInfo("action " . $actionName . " already exists.");
                                $actionId = $api->getActionIdByActionName($actionName);
                                 if (isset($actionId)) {
                                    $api->doActionUpdateStatus($actionId, "0");
                                    $this->addInfo("action " . $actionName . " enable.");
                                 }
				            } else {
				                $api->doActionCreateDiscoveredUp($aIpAddress[$i], $discoveryCheckID, $userID);	
				                $this->addInfo("action create " . $actionName . " success.");
				            }
				            
				            
                            
                            
    		    			// RULE DOWN DELAY
    		    			$dRuleName = $aIpAddress[$i] . " Down Delay";
    		    			if ($api->isDruleNameExists($dRuleName)) {
    		    				$this->addInfo("discovery rule " . $dRuleName . " already exists.");
    		    			} else {
    		    				$api->doDiscoveryRuleCreateDownDelay($dRuleName, $aIpAddress[$i]);
    		    				$this->addInfo("discovery rule " . $dRuleName . " success.");
    		    			}

    		    			
    		    			// ACTION DOWN DELAY
    		    			$actionName = $aIpAddress[$i] . " Action Down Delay";
    		    			$discoveryID = $api->getDiscoveryRuleIdByDiscoveryName($dRuleName);
                            $discoveryCheckID = $api->getDiscoveryCheckIdByDiscoveryId($discoveryID);
                            
                            if ($api->isActionNameExists($actionName)) {
                                $this->addInfo("action " . $actionName . " already exists.");
                                $actionId = $api->getActionIdByActionName($actionName);
                                 if (isset($actionId)) {
                                    $api->doActionUpdateStatus($actionId, "0");
                                    $this->addInfo("action " . $actionName . " enable.");
                                 }
                            } else {
                                $api->doActionCreateDownDelay($aIpAddress[$i], $discoveryCheckID, $userID);
                                $this->addInfo("action create " . $actionName . " success.");
                            }
    		    			
    		    			
                            
                            // RULE UP DELAY
                            $dRuleName = $aIpAddress[$i] . " Up Delay";
                            if ($api->isDruleNameExists($dRuleName)) {
                            	$this->addInfo("discovery rule " . $dRuleName . " already exists.");
                            } else {
                            	$api->doDiscoveryRuleCreateUpDelay($dRuleName, $aIpAddress[$i]);
                            	$this->addInfo("discovery rule " . $dRuleName . " success.");
                            }
                            
                            
                            
                            // ACTION UP DELAY
                            $actionName = $aIpAddress[$i] . " Action Up Delay";
                            $discoveryID = $api->getDiscoveryRuleIdByDiscoveryName($dRuleName);
                            $discoveryCheckID = $api->getDiscoveryCheckIdByDiscoveryId($discoveryID);
                            
                            if ($api->isActionNameExists($actionName)) {
                                $this->addInfo("action " . $actionName . " already exists.");
                                $actionId = $api->getActionIdByActionName($actionName);
                                 if (isset($actionId)) {
                                    $api->doActionUpdateStatus($actionId, "0");
                                    $this->addInfo("action " . $actionName . " enable.");
                                 }
                            } else {
                            	$api->doActionCreateUpDelay($aIpAddress[$i], $discoveryCheckID, $userID);
                            	$this->addInfo("action create " . $actionName . " success.");
                            }
                            
                            
                            
				            
				            
                            
                            
    		    			
    		    		}
    		    	}
    		    }
    		    */
    		    
    		    
    		    
    		    
    		    
    		    
    		    
    		} else {
    			// TODO 
    			throw new Exception("Account id missing.");
    		}
    		
    		
    		
    	} catch(Exception $e) {
    		$complete = "0";
    	   $this->addError($e->getMessage());
    	}
    	
    	
    	
    	return ($complete == "0") ? false : true;
    }
    
    
    /**
     * This method is invoked automatically when suspending an account.
     * @return boolean true if suspend succeeds
     */
    public function Suspend() {
    	
    	// TODO overide function terminate
    	// 1. Disable Action Network Traffic
    	// 2. Disable Action Discovery
        
        
        
        try {
            
            $accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;
            
            // 0. Zabbix Connect
            $api = ZabbixApi::singleton();
            $api->_connect($this->server_hostname, $this->server_username, $this->server_password);
            
            
            
            
            
            // 1. Disable Action Network Traffic
            if (isset($accountId)) {
                $aServer = HostbillApi::singleton()->getServerByAccountId($accountId);
                
                if (count($aServer) > 0) {
                    for ($i=0;$i<count($aServer);$i++) {
                        $prefix = ($i == 0) ? "" : "-" . $i;
                        $hostName = $this->account_details["domain"] . $prefix;
                        
                        
                        $aPortSwitch = HostbillApi::singleton()->getPortSwitchByAccountId($accountId);
                        if (count($aPortSwitch) > 0) {
                            for ($j=0;$j<count($aPortSwitch);$j++) {
                                   
                                if (isset($aPortSwitch[$j]["item_id"]) && isset($aServer[$i]["item_id"]) 
                                    && isset($aPortSwitch[$j]["port_id"]) && isset($aPortSwitch[$j]["port_name"])) {
                                            
                                        
                                        if ($aPortSwitch[$j]["item_id"] == $aServer[$i]["item_id"]) {
                                            
                                            $portID = $aPortSwitch[$j]["port_id"];                                       
                                        
                                            
                                           // DISABLE ACTION TRIGGER INCOMING
                                           $descriptionName = $accountId . "-trigger-network-traffic-incoming-" . $portID . $prefix;
                                           $actionName = "action-" . $descriptionName;
                                            if ($api->isActionNameExists($actionName)) {
                                                 $actionId = $api->getActionIdByActionName($actionName);
                                                 if (isset($actionId)) {
                                                    $api->doActionUpdateStatus($actionId, "1");
                                                    $this->addInfo("action " . $actionName . " disable.");
                                                 }
                                            }
                                           
                                       
                                            // DISABLE ACTION TRIGGER OUTGOING
                                            $descriptionName = $accountId . "-trigger-network-traffic-outgoing-" . $portID . $prefix;
                                            $actionName = "action-" . $descriptionName;
                                            if ($api->isActionNameExists($actionName)) {
                                                 $actionId = $api->getActionIdByActionName($actionName);
                                                 if (isset($actionId)) {
                                                    $api->doActionUpdateStatus($actionId, "1");
                                                    $this->addInfo("action " . $actionName . " disable.");
                                                 }
                                            }
                                            
                                        
                                        
                                        }
                                        
                                        
                                        
                                }
                            }
                        }
                        
                        
                        
                        
                    }
                }
            }
            
            
            
            
            
            
            
            // 2. Disable Action Discovery
            $aIpAddress = HostbillApi::singleton()->getIpByAccountId($accountId);
            if (count($aIpAddress) > 0) {
                for ($i=0;$i<count($aIpAddress);$i++) {
                    if (isset($aIpAddress[$i]) && $aIpAddress[$i] != "") {

                        
                        
                        // ACTION DOWN
                        $actionName = $aIpAddress[$i] . " Action Lost Down";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "1");
                                $this->addInfo("action " . $actionName . " disable.");
                             }
                        }
                            
            
                        // ACTION UP
                        $actionName = $aIpAddress[$i] . " Action Discovered Up";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "1");
                                $this->addInfo("action " . $actionName . " disable.");
                             }
                        }
                        
                        
                        // ACTION DOWN DELAY
                        $actionName = $aIpAddress[$i] . " Action Down Delay";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "1");
                                $this->addInfo("action " . $actionName . " disable.");
                             }
                        }
                        
                        
                        // ACTION UP DELAY
                        $actionName = $aIpAddress[$i] . " Action Up Delay";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "1");
                                $this->addInfo("action " . $actionName . " disable.");
                             }
                        }
                        
                        
                    }
                }
            }
            
            
        } catch(Exception $e) {
           $this->addError($e->getMessage());
        }
        
        
        
        
        return true;
    }
    
    
    /**
     * This method is invoked automatically when unsuspending an account.
     * @return boolean true if unsuspend succeeds
     */
    public function Unsuspend() {
    	
    	
    	// TODO overide function terminate
    	// 1. Disable Action Network Traffic
        // 2. Disable Action Discovery
        
        
        
        try {
            
            $accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;
            
            // 0. Zabbix Connect
            $api = ZabbixApi::singleton();
            $api->_connect($this->server_hostname, $this->server_username, $this->server_password);
            
            
            
            // 1. Disable Action Network Traffic
            if (isset($accountId)) {
                $aServer = HostbillApi::singleton()->getServerByAccountId($accountId);
                
                if (count($aServer) > 0) {
                    for ($i=0;$i<count($aServer);$i++) {
                        $prefix = ($i == 0) ? "" : "-" . $i;
                        $hostName = $this->account_details["domain"] . $prefix;
                        
                        
                        $aPortSwitch = HostbillApi::singleton()->getPortSwitchByAccountId($accountId);
                        if (count($aPortSwitch) > 0) {
                            for ($j=0;$j<count($aPortSwitch);$j++) {
                                   
                                if (isset($aPortSwitch[$j]["item_id"]) && isset($aServer[$i]["item_id"]) 
                                    && isset($aPortSwitch[$j]["port_id"]) && isset($aPortSwitch[$j]["port_name"])) {
                                            
                                        
                                        if ($aPortSwitch[$j]["item_id"] == $aServer[$i]["item_id"]) {
                                            
                                            $portID = $aPortSwitch[$j]["port_id"];                                      
                                        
                                            
                                           // ENABLE ACTION TRIGGER INCOMING
                                           $descriptionName = $accountId . "-trigger-network-traffic-incoming-" . $portID . $prefix;
                                           $actionName = "action-" . $descriptionName;
                                            if ($api->isActionNameExists($actionName)) {
                                                 $actionId = $api->getActionIdByActionName($actionName);
                                                 if (isset($actionId)) {
                                                    $api->doActionUpdateStatus($actionId, "0");
                                                    $this->addInfo("action " . $actionName . " enable.");
                                                 }
                                            }
                                           
                                       
                                            // ENABLE ACTION TRIGGER OUTGOING
                                            $descriptionName = $accountId . "-trigger-network-traffic-outgoing-" . $portID . $prefix;
                                            $actionName = "action-" . $descriptionName;
                                            if ($api->isActionNameExists($actionName)) {
                                                 $actionId = $api->getActionIdByActionName($actionName);
                                                 if (isset($actionId)) {
                                                    $api->doActionUpdateStatus($actionId, "0");
                                                    $this->addInfo("action " . $actionName . " enable.");
                                                 }
                                            }
                                            
                                        
                                        
                                        }
                                        
                                        
                                        
                                }
                            }
                        }
                        
                        
                        
                        
                    }
                }
            }
            
            
            
            // 2. Disable Action Discovery
            $aIpAddress = HostbillApi::singleton()->getIpByAccountId($accountId);
            if (count($aIpAddress) > 0) {
                for ($i=0;$i<count($aIpAddress);$i++) {
                    if (isset($aIpAddress[$i]) && $aIpAddress[$i] != "") {

                        
                        
                        // ACTION DOWN
                        $actionName = $aIpAddress[$i] . " Action Lost Down";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "0");
                                $this->addInfo("action " . $actionName . " enable.");
                             }
                        }
                            
            
                        // ACTION UP
                        $actionName = $aIpAddress[$i] . " Action Discovered Up";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "0");
                                $this->addInfo("action " . $actionName . " enable.");
                             }
                        }
                        
                        
                        // ACTION DOWN DELAY
                        $actionName = $aIpAddress[$i] . " Action Down Delay";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "0");
                                $this->addInfo("action " . $actionName . " enable.");
                             }
                        }
                        
                        
                        // ACTION UP DELAY
                        $actionName = $aIpAddress[$i] . " Action Up Delay";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "0");
                                $this->addInfo("action " . $actionName . " enable.");
                             }
                        }
                        
                        
                    }
                }
            }
            
            
        } catch(Exception $e) {
           $this->addError($e->getMessage());
        }
        
        
        
        
        return true;
    }
    
    /**
     * This method is invoked automatically when terminating an account.
     * @return boolean true if termination succeeds
     */
    public function Terminate() {
    	
    	// 1. Disable Action Network Traffic
    	// 2. Disable Action Discovery
    	    	
    	
    	try {
    		
    		$accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;
    		$aServer = array();
    		
    		// 0. Zabbix Connect
            $api = ZabbixApi::singleton();
            $api->_connect($this->server_hostname, $this->server_username, $this->server_password);
            
            
            // 1. Disable Action Network Traffic
            if (isset($accountId)) {
                $aServer = HostbillApi::singleton()->getServerByAccountId($accountId);
                
                if (count($aServer) > 0) {
                	for ($i=0;$i<count($aServer);$i++) {
                		$prefix = ($i == 0) ? "" : "-" . $i;
                        $hostName = $this->account_details["domain"] . $prefix;
                        
                        
                        $aPortSwitch = HostbillApi::singleton()->getPortSwitchByAccountId($accountId);
                        if (count($aPortSwitch) > 0) {
                            for ($j=0;$j<count($aPortSwitch);$j++) {
                                   
                                if (isset($aPortSwitch[$j]["item_id"]) && isset($aServer[$i]["item_id"]) 
                                    && isset($aPortSwitch[$j]["port_id"]) && isset($aPortSwitch[$j]["port_name"])) {
                                          	
                                    	
                                    	if ($aPortSwitch[$j]["item_id"] == $aServer[$i]["item_id"]) {
                                            
                                    		$portID = $aPortSwitch[$j]["port_id"];                                    	
                                    	
                                            
                                    	   // DISABLE ACTION TRIGGER INCOMING
                                           $descriptionName = $accountId . "-trigger-network-traffic-incoming-" . $portID . $prefix;
                                           $actionName = "action-" . $descriptionName;
	                                    	if ($api->isActionNameExists($actionName)) {
					                             $actionId = $api->getActionIdByActionName($actionName);
					                             if (isset($actionId)) {
					                                $api->doActionUpdateStatus($actionId, "1");
					                                $this->addInfo("action " . $actionName . " disable.");
					                             }
					                        }
                                           
                                       
                                            // DISABLE ACTION TRIGGER OUTGOING
                                            $descriptionName = $accountId . "-trigger-network-traffic-outgoing-" . $portID . $prefix;
                                    	    $actionName = "action-" . $descriptionName;
                                            if ($api->isActionNameExists($actionName)) {
                                                 $actionId = $api->getActionIdByActionName($actionName);
                                                 if (isset($actionId)) {
                                                    $api->doActionUpdateStatus($actionId, "1");
                                                    $this->addInfo("action " . $actionName . " disable.");
                                                 }
                                            }
                                            
                                    	
                                    	
                                    	}
                                    	
                                    	
                                    	
                                }
                            }
                        }
                        
                        
                        
                        
                	}
                }
            }
            
            
            
            
            // 2. Disable Action Discovery
            $aIpAddress = HostbillApi::singleton()->getIpByAccountId($accountId);
            if (count($aIpAddress) > 0) {
                for ($i=0;$i<count($aIpAddress);$i++) {
                    if (isset($aIpAddress[$i]) && $aIpAddress[$i] != "") {

                    	
                    	
                    	// ACTION DOWN
                        $actionName = $aIpAddress[$i] . " Action Lost Down";
                        if ($api->isActionNameExists($actionName)) {
                        	 $actionId = $api->getActionIdByActionName($actionName);
                        	 if (isset($actionId)) {
                        	 	$api->doActionUpdateStatus($actionId, "1");
                        	 	$this->addInfo("action " . $actionName . " disable.");
                        	 }
                        }
                            
            
                        // ACTION UP
                        $actionName = $aIpAddress[$i] . " Action Discovered Up";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "1");
                                $this->addInfo("action " . $actionName . " disable.");
                             }
                        }
                        
                        
                        // ACTION DOWN DELAY
                        $actionName = $aIpAddress[$i] . " Action Down Delay";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "1");
                                $this->addInfo("action " . $actionName . " disable.");
                             }
                        }
                    	
                        
                        // ACTION UP DELAY
                        $actionName = $aIpAddress[$i] . " Action Up Delay";
                        if ($api->isActionNameExists($actionName)) {
                             $actionId = $api->getActionIdByActionName($actionName);
                             if (isset($actionId)) {
                                $api->doActionUpdateStatus($actionId, "1");
                                $this->addInfo("action " . $actionName . " disable.");
                             }
                        }
                    	
                    	
                    }
                }
            }
            
    		
    	} catch(Exception $e) {
           $this->addError($e->getMessage());
        }
    	
    	
    	
    	
    	return true;
    }
    
    /**
     * 
     * Enter description here ...
     */
    /*public function Renewal() {
    	
    	// 0. Zabbix Connect
    	// 1. Get Host Id
    	// 2. Update Host
    	
    	
    	$res = true;
        
        try {
        	$accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;
        	$domain = (isset($this->account_details["domain"])) ? $this->account_details["domain"] : null;
        	
        	
        	if (isset($accountId) && isset($domain)) {
        		
        		// 0. Zabbix Connect
                $api = ZabbixApi::singleton();
                $api->_connect($this->server_hostname, $this->server_username, $this->server_password);
        		
                // 1. Get Host Id
                $aRes = $api->getHostByItemKey($accountId . "-network");
                
                if (count($aRes["hostid"]) > 0 && count($aRes["host"]) > 0) {
                	for ($i=0;$i<count($aRes["hostid"]);$i++) {
                		
                		if (isset($aRes["hostid"][$i]) && isset($aRes["host"][$i])) {
                			$prefix = ($i == 0) ? "" : "-" . $i;
                            $hostName = $domain . $prefix;
                            
                            // 2. Update Host
                            $api->doHostUpdate($aRes["hostid"][$i], $hostName);
                            $this->addInfo("Update Hostname " . $aRes["host"][$i] . " to " . $hostName);
                		}
                		
                		
                	}
                }
                
        	} else {
        		//$res =false;
        		//$this->addError("Variable missing.");
        		throw new Exception("Variable missing.");
        	}
        	
        	
        	
        	
        	
        	 // =======================================
             // =======================================
             // =========BLOCK FOR OPTIMIZE=================
             // =======================================
             // =======================================
        	
        	
            // TODO START FOR OBTIMIZE TEST.  (CREATE...)
            // 1. Create User Zabbix Group User In "Free Monitoring"
            $userName = (isset($this->account_details["client_id"])) ? $this->account_details["client_id"] : null;
            // TODO check free, no free
            $usergroupID = $api->getUserGroupIdByGroupName();
            $sendto = (isset($this->client_data["email"])) ? $this->client_data["email"] : null;
            
            if ($api->isUserNameExists($userName)) {
                $this->addInfo("user " . $userName . " alias " .  $sendto . " already exists.");
            } else {
                
                if (isset($userName) && isset($usergroupID) && isset($sendto)) {
                    $api->doUserCreate($userName, $usergroupID, $sendto);
                    $this->addInfo("user create " . $userName .  " alias " .  $sendto . " success.");
                } else {
                    throw new Exception("Cannot create user.");
                }
                
            }
            
            
            $accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;
            $aServer = array();
            
            if (isset($accountId)) {
                $aServer = HostbillApi::singleton()->getServerByAccountId($accountId);
                
                if (count($aServer) > 0) {
                    for ($i=0;$i<count($aServer);$i++) {
                        
                        if (isset($aServer[$i]["ip"]) && isset($aServer[$i]["username"])) {
                            
                            // 2.0.1 CREATE HOST GROUP
                            $hostGroupName = $aServer[$i]["ip"];
                            if ($api->isHostGroupExists($hostGroupName)) {
                                $this->addInfo("hostgroup " . $hostGroupName . " already exists.");
                            } else {
                                $api->doHostGroupCreate($hostGroupName);
                                $this->addInfo("hostgroup create " . $hostGroupName .  " success.");
                            }
                            
                            
                            // 2.0.2 Create Host SNMP
                            $interfaceIP = $hostGroupName;
                            
                            $aHostGroupId = array(
                               array(
                                   // check free no free
                                   "groupid" => $api->getHostGroupIdByGroupName()
                               ),
                               array(
                                   "groupid" => $api->getHostGroupIdByGroupName($hostGroupName)
                               )
                            );
                            
                            $prefix = ($i == 0) ? "" : "-" . $i;                            
                            //$hostName = $this->account_details["id"] . "-" . $this->account_details["client_id"] . "-";
                            //$hostName .= $this->account_details["order_id"] . "-". $this->account_details["product_id"] . $prefix;
                            $hostName = $this->account_details["domain"] . $prefix;
                            $hostVisible = $this->account_details["domain"] . $prefix;  
                            
                            
                            if ($api->isHostExists($hostVisible)) {
                                $this->addInfo("host " . $hostVisible . " already exists.");
                            } else {
                                $api->doHostCreateSNMP($hostName, $hostVisible, $aHostGroupId, $interfaceIP);
                                $this->addInfo("host create" . $hostVisible . " success.");
                            }
                            
                            
                            
                            
                            // 3. Create Item Graph Traffic IN, OUT
                            $aPortSwitch = HostbillApi::singleton()->getPortSwitchByAccountId($accountId);
                            if (count($aPortSwitch) > 0) {
                                for ($j=0;$j<count($aPortSwitch);$j++) {
                                    
                                    if (isset($aPortSwitch[$j]["item_id"]) && isset($aServer[$i]["item_id"]) 
                                          && isset($aPortSwitch[$j]["port_id"]) && isset($aPortSwitch[$j]["port_name"])) {
                                                                                    
                                          if ($aPortSwitch[$j]["item_id"] == $aServer[$i]["item_id"]) {
                                            $portID = $aPortSwitch[$j]["port_id"];
                                            $itemName = $accountId . "-network-traffic-incoming-port-" . $portID;
                                            $itemKey = $itemName;
                                            $hostID = $api->getHostIdByHostName($hostName);
                                            
                                            $interfaceID = $api->getHostInterfaceIdByHostId($hostID);
                                            $snmpOID = "interfaces.ifTable.ifEntry.ifInOctets." . $portID;
                                            $snmpCommunity = $aServer[$i]["username"];
                                            
                                            
                                            
                                            if (isset($interfaceID) && isset($snmpCommunity) && isset($snmpOID)) {
                                                
                                               
                                                // ITEM INCOMING GRAPH
                                                if ($api->isItemKeyExists($hostName, $itemKey)) {
                                                    $this->addInfo("item " . $itemName . " already exists.");
                                                } else {
                                                    $api->doItemCreateGraphNetworkTraffic($itemName, $hostID, $interfaceID, $snmpCommunity, $snmpOID);
                                                    $this->addInfo("item create" . $itemName . " success.");
                                                }
                                                
                                                
                                                // ITEM OUTGOING GRAPH
                                                $itemName = $accountId . "-network-traffic-outgoing-port-" . $portID;
                                                $itemKey = $itemName;
                                                $snmpOID = "interfaces.ifTable.ifEntry.ifOutOctets." . $portID;
                                                
                                                if ($api->isItemKeyExists($hostName, $itemKey)) {
                                                    $this->addInfo("item " . $itemName . " already exists.");
                                                } else {
                                                    $api->doItemCreateGraphNetworkTraffic($itemName, $hostID, $interfaceID, $snmpCommunity, $snmpOID);
                                                    $this->addInfo("item create" . $itemName . " success.");
                                                }
                                                
                                                // 7. Create Item Trigger Traffic IN, OUT
                                                 // ITEM INCOMING TRIGGER
                                                $itemName = $accountId . ".net.if.in." . $portID;
                                                $itemKey = $itemName;
                                                $snmpOID = "interfaces.ifTable.ifEntry.ifInOctets." . $portID;
                                               if ($api->isItemKeyExists($hostName, $itemKey)) {
                                                    // TODO $api->doActionUpdateStatus($actionId, "0");
                                                    $this->addInfo("item " . $itemName . " already exists.");
                                                } else {
                                                    $api->doItemCreateTriggerNetworkTraffic($itemName, $hostID, $interfaceID, $snmpCommunity, $snmpOID);
                                                    $this->addInfo("item create" . $itemName . " success.");
                                                }
                                                
                                                
                                                // ITEM OUTGOING TRIGGER
                                                $itemName = $accountId . ".net.if.out." . $portID;
                                                $itemKey = $itemName;
                                                $snmpOID = "interfaces.ifTable.ifEntry.ifOutOctets." . $portID;
                                               if ($api->isItemKeyExists($hostName, $itemKey)) {
                                                    // TODO $api->doActionUpdateStatus($actionId, "0");
                                                    $this->addInfo("item " . $itemName . " already exists.");
                                                } else {
                                                    $api->doItemCreateTriggerNetworkTraffic($itemName, $hostID, $interfaceID, $snmpCommunity, $snmpOID);
                                                    $this->addInfo("item create" . $itemName . " success.");
                                                }
                                                
                                                
                                                
                                                
                                                // 4. Create Graph SNMP IN/OUT
                                                $graphName = $accountId ." Network Traffic " . $portID;
                                                
                                                if ($api->isGraphNameExists($hostName, $graphName)) {
                                                    
                                                    $this->addInfo("graph " . $graphName . " already exists.");
                                                    
                                                } else {
                                                    $aItem = $api->getItemByHostIdByItemKey($hostID, "-port-" . $portID);
                                                    if (count($aItem) > 0) {
                                                        if (isset($aItem["0"]->itemid) && isset($aItem["1"]->itemid)) {
                                                            
                                                           $api->doGraphCreateNetworkTraffic($graphName , $aItem["0"]->itemid, $aItem["1"]->itemid);
                                                            
                                                        }
                                                    }
                                                    
                                                    $this->addInfo("graph create" . $graphName . " success.");
                                                }
                                                
                                                
                                                
                                                
                                                // 8. Cretae Trigger Traffic IN, OUT
                                                // 9. Create Action Traffic IN, OUT
                                                
                                                // TRIGGER INCOMING 
                                                $descriptionName = $accountId . "-trigger-network-traffic-incoming-" . $portID . $prefix;
                                                if ($api->IsTriggerExists($descriptionName)) {
                                                    $this->addInfo("trigger " . $descriptionName . " already exists.");
                                                } else {
                                                    $api->doTriggerCreateNetworkTrafficIncoming($accountId, $hostName, $descriptionName, $portID);
                                                    $this->addInfo("trigger create " . $descriptionName . " success.");
                                                }
                                                
                                                
                                                // ACTION TRIGGER INCOMING
                                                $triggerId = $api->getTriggerIdByDescription($descriptionName);
                                                $userId = $api->getUserIdByUserAlias("Admin");
                                                if (isset($triggerId) && isset($userId)) {
                                                    $actionName = "action-" . $descriptionName;
                                                    
                                                    if ($api->isActionNameExists($actionName)) {
                                                        
                                                        $this->addInfo("action " . $actionName . " already exists.");
                                                        $actionId = $api->getActionIdByActionName($actionName);
                                                        if (isset($actionId)) {
                                                           $api->doActionUpdateStatus($actionId, "0");
                                                           $this->addInfo("action " . $actionName . " enable.");
                                                        }
                                                        
                                                    } else {
                                                        $api->doActionCreateNetworkTraffic($actionName, $triggerId, $userId);
                                                        $this->addInfo("action create " . $actionName . " success.");
                                                    }
                                                    
                                                }
                                                
                                                
                                                // TRIGGER OUTGOING
                                                $descriptionName = $accountId . "-trigger-network-traffic-outgoing-" . $portID . $prefix;
                                                if ($api->IsTriggerExists($descriptionName)) {
                                                    $this->addInfo("trigger " . $descriptionName . " already exists.");
                                                } else {
                                                    $api->doTriggerCreateNetworkTrafficOutgoing($accountId, $hostName, $descriptionName, $portID);
                                                    $this->addInfo("trigger create " . $descriptionName . " success.");
                                                }
                                                
                                                
                                                 // ACTION TRIGGER OUTGOING
                                                $triggerId = $api->getTriggerIdByDescription($descriptionName);
                                                if (isset($triggerId) && isset($userId)) {
                                                    $actionName = "action-" . $descriptionName;
                                                    if ($api->isActionNameExists($actionName)) {
                                                        
                                                        $this->addInfo("action " . $actionName . " already exists.");
                                                        $actionId = $api->getActionIdByActionName($actionName);
                                                        if (isset($actionId)) {
                                                           $api->doActionUpdateStatus($actionId, "0");
                                                           $this->addInfo("action " . $actionName . " enable.");
                                                        }
                                                        
                                                    } else {
                                                        $api->doActionCreateNetworkTraffic($actionName, $triggerId, $userId);
                                                        $this->addInfo("action create " . $actionName . " success.");
                                                    }
                                                }
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                            }
                                            
                                            
                                            
                                            
                                        }
                                    }
                                    
                                    
                                }
                            }
                            
                            
                            
                            
                        }
                        
                    }
                }
                
                
                
                
                
                
                
                $aIpAddress = HostbillApi::singleton()->getIpByAccountId($accountId);
                if (count($aIpAddress) > 0) {
                    for ($i=0;$i<count($aIpAddress);$i++) {
                        if (isset($aIpAddress[$i]) && $aIpAddress[$i] != "") {
                            
                            // 5. Create Discovery Rule
                            
                            // RULE UP/DOWN
                            $dRuleName = $aIpAddress[$i] . " Up Down";
                            if ($api->isDruleNameExists($dRuleName)) {
                                $this->addInfo("discovery rule " . $dRuleName . " already exists.");
                            } else {
                                $api->doDiscoveryRuleCreateUpDown($dRuleName, $aIpAddress[$i]);
                                $this->addInfo("discovery rule " . $dRuleName . " success.");
                            }
                            
                            
                            // 6. Create Action Discovery
                            
                            // ACTION
                            $discoveryID = $api->getDiscoveryRuleIdByDiscoveryName($dRuleName);
                            $discoveryCheckID = $api->getDiscoveryCheckIdByDiscoveryId($discoveryID);
                            $userAlias = $sendto;
                            $userID = $api->getUserIdByUserAlias($userAlias);
                            
                            // ACTION DOWN
                            $actionName = $aIpAddress[$i] . " Action Lost Down";
                            if ($api->isActionNameExists($actionName)) {
                                $this->addInfo("action " . $actionName . " already exists.");
                                $actionId = $api->getActionIdByActionName($actionName);
                                 if (isset($actionId)) {
                                    $api->doActionUpdateStatus($actionId, "0");
                                    $this->addInfo("action " . $actionName . " enable.");
                                 }
                            } else {
                                $api->doActionCreateLostDown($aIpAddress[$i], $discoveryCheckID, $userID);
                                $this->addInfo("action create " . $actionName . " success.");
                            }
                            
            
                            // ACTION UP
                            $actionName = $aIpAddress[$i] . " Action Discovered Up";
                            if ($api->isActionNameExists($actionName)) {
                                $this->addInfo("action " . $actionName . " already exists.");
                                $actionId = $api->getActionIdByActionName($actionName);
                                 if (isset($actionId)) {
                                    $api->doActionUpdateStatus($actionId, "0");
                                    $this->addInfo("action " . $actionName . " enable.");
                                 }
                            } else {
                                $api->doActionCreateDiscoveredUp($aIpAddress[$i], $discoveryCheckID, $userID);  
                                $this->addInfo("action create " . $actionName . " success.");
                            }
                            
                            
                            
                            
                            // RULE DOWN DELAY
                            $dRuleName = $aIpAddress[$i] . " Down Delay";
                            if ($api->isDruleNameExists($dRuleName)) {
                                $this->addInfo("discovery rule " . $dRuleName . " already exists.");
                            } else {
                                $api->doDiscoveryRuleCreateDownDelay($dRuleName, $aIpAddress[$i]);
                                $this->addInfo("discovery rule " . $dRuleName . " success.");
                            }

                            
                            // ACTION DOWN DELAY
                            $actionName = $aIpAddress[$i] . " Action Down Delay";
                            $discoveryID = $api->getDiscoveryRuleIdByDiscoveryName($dRuleName);
                            $discoveryCheckID = $api->getDiscoveryCheckIdByDiscoveryId($discoveryID);
                            
                            if ($api->isActionNameExists($actionName)) {
                                $this->addInfo("action " . $actionName . " already exists.");
                                $actionId = $api->getActionIdByActionName($actionName);
                                 if (isset($actionId)) {
                                    $api->doActionUpdateStatus($actionId, "0");
                                    $this->addInfo("action " . $actionName . " enable.");
                                 }
                            } else {
                                $api->doActionCreateDownDelay($aIpAddress[$i], $discoveryCheckID, $userID);
                                $this->addInfo("action create " . $actionName . " success.");
                            }
                            
                            
                            
                            // RULE UP DELAY
                            $dRuleName = $aIpAddress[$i] . " Up Delay";
                            if ($api->isDruleNameExists($dRuleName)) {
                                $this->addInfo("discovery rule " . $dRuleName . " already exists.");
                            } else {
                                $api->doDiscoveryRuleCreateUpDelay($dRuleName, $aIpAddress[$i]);
                                $this->addInfo("discovery rule " . $dRuleName . " success.");
                            }
                            
                            
                            
                            // ACTION UP DELAY
                            $actionName = $aIpAddress[$i] . " Action Up Delay";
                            $discoveryID = $api->getDiscoveryRuleIdByDiscoveryName($dRuleName);
                            $discoveryCheckID = $api->getDiscoveryCheckIdByDiscoveryId($discoveryID);
                            
                            if ($api->isActionNameExists($actionName)) {
                                $this->addInfo("action " . $actionName . " already exists.");
                                $actionId = $api->getActionIdByActionName($actionName);
                                 if (isset($actionId)) {
                                    $api->doActionUpdateStatus($actionId, "0");
                                    $this->addInfo("action " . $actionName . " enable.");
                                 }
                            } else {
                                $api->doActionCreateUpDelay($aIpAddress[$i], $discoveryCheckID, $userID);
                                $this->addInfo("action create " . $actionName . " success.");
                            }
                            
                            
                            
                            
                            
                            
                            
                            
                        }
                    }
                }
                
                
                
                
                
            } else {
                //$res =false;
                //$this->addError("Variable missing.");
                throw new Exception("Variable missing.");
            }
        	
        	
        	// =======================================
            // =======================================
            // =========END BLOCK FOR OPTIMIZE=================
            // =======================================
            // =======================================
        	
        	
        	
        	
        } catch (Exception $e) {
        	$res = false;
        	$this->addError($e->getMessage());
        }
        
    	
    	return $res;
    }
    */
    
    /**
     * This method is invoked when account should have password changed
     * @param string $newpassword New password to set account with
     * @return boolean true if action succeeded
     */
    public function ChangePassword($newpassword) {
    	return true;
    }
    
    
    /**
     * This method is invoked when account should be upgraded/downgraded
     * $options variable is loaded with new package configuration
     * @return boolean true if action succeeded
     */
    public function ChangePackage() {
    	return true;
    }
    
    
    /**
     * Auxilary method that HostBill will load to get plans from server:
     * @see $options variable above
     * @return array - list of plans to display in product configuration
     */
    public function getPlans() {
    	return false;
    }
    
    
    /**
     * This method is OPTIONAL. in this example it is used to connect to the server and manage all the modules action with the API.
     *  @ignore
     */
    private function Send($action, $post) {
    	return true;
    }
    
    
    
}