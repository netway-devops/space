<?php
/*************************************************************
 *
 * Hosting Module Class - Symantecvip
 *
 * http://dev.hostbillapp.com/dev-kit/provisioning-modules/
 * http://wiki.hostbillapp.com/index.php?title=Custom_Modules#Examples
 * http://wiki.hostbillapp.com/index.php?title=Hosting_Modules
 * http://hostbillapp.com/features/
 * http://wiki.hostbillapp.com/index.php?title=HostBill_Plugins
 *
 *
 ************************************************************/


class symantecvip extends HostingModule {

	private $server_hostname;
    private $server_username;
    private $server_password;

	// Extras >> Plugins >> Hosting Modules
	// Module name
	protected $modname = "Symantec VIP";

	// Extras >> Search results
	// Description module
	protected $description = "Symantec VIP integration with HostBill. Additionally trough client functions it allows to browse usage graphs generated by Rvglobalsoft.com.";


	// Settings >> Products && Services
    // Connect with App
	protected $options = array();


	/**
    * You can choose which fields to display in Settings->Apps section
    * by defining this variable
    * @var array
    */
	protected $serverFields = array(
        "hostname" => true,
        "ip" => false,
        "maxaccounts" => false,
        "status_url" => false,
        "username" => true,
        "password" => true,
        "hash" => false,
        "ssl" => false,
        "nameservers" => false
    );

    /**
      * HostBill will replace default labels for server fields
      * with this variable configured
      * @var array
      */
    protected $serverFieldsDescription = array(
        "hostname" => "Rvglobalsoft Api",
        "username" => "Username",
        "password" => "Password"
    );


	/**
     * HostBill will call this method before calling any other function from your module
     * It will pass remote  app details that module should connect with
     *
     * @param array $connect Server details configured in Settings->Apps
     */
    public function connect($connect) {

    	$this->server_hostname = (isset($connect["host"])) ? $connect["host"] : "";
    	$this->server_username = (isset($connect["username"])) ? $connect["username"] : "";
        $this->server_password = (isset($connect["password"])) ? $connect["password"] : "";

    }


    /**
     * HostBill will call this method when admin clicks on "test Connection" in settings->apps
     * It should test connection to remote app using details provided in connect method
     *
     * Use $this->addError('message'); to provide errors details (if any)
     *
     * http://xxx.xxx.xxx.xxx/public_html/admin/index.php?cmd=servers&action=test_connection
     *
     * @see connect
     * @return boolean true if connection suceeds
     */
    public function testConnection() {
    	// TODO testConnection.
    	return true;
    }





    /**
     * This method is invoked automatically when creating an account.
     * @return boolean true if creation succeeds
     */
    public function Create() {

    	// DB
    	$db = hbm_db();

    	//TODO : fix check $this->account_details['product_id']
    	$vip_now		= '55';
    	$vip_whm_free 	= '58'; //1
    	$vip_whm 		= '59'; //2
    	$vip_cpanel 	= '60'; //6
    	$vip_apps		= '61'; //7




        if (($this->account_details['product_id'] == $vip_now) || ($this->account_details['product_id'] == $vip_whm_free) || ($this->account_details['product_id'] == $vip_whm)){

	    	// Validate ก่อนที่จะทำการ Create Account ต้องตรวจสอบ Certificate ก่อนว่าเรียบร้อยแล้วหรือยัง
	    	$query = sprintf("
	                            SELECT
	                                i.vip_info_id,
	                                i.symantec_connection
	                            FROM
	                                %s i
	                            WHERE
	                                i.account_id='%s'
	                            AND
	                                i.usr_id='%s'
	                            AND
	                                i.symantec_connection='%s'
	                            "
	                            , "hb_vip_info"
	                            , $this->account_details['id']
	                            , $this->account_details['client_id']
	                            , "Success"
	                        );

	         $aRes = $db->query($query)->fetchAll();
	         if (isset($aRes[0]["vip_info_id"]) && isset($aRes[0]["symantec_connection"]) && $aRes[0]["symantec_connection"] == "Success") {
	         } else {
	         	$this->addError("Please verify symantec vip on step1-2 before create account.");
	         	return false;
	         }



	    	// สั่งซื้อฟรี account ครั้งแรกที่ทำการ Create
	    	$isUpdateRecurringAcc = false;

	    	if (isset($this->account_details['total']) && ($this->account_details['total'] == "0" || $this->account_details['total'] == "0.00")
	    	       && isset($this->account_details['customforms']) && is_array($this->account_details['customforms'])
	    	       && isset($this->account_details['id'])
	    	) {

	    		      foreach ($this->account_details['customforms'] as $key => $value) {
	    		      	   if (isset($this->account_details['customforms'][$key]['name'])
	    		      	           && $this->account_details['customforms'][$key]['name'] == "Symantec VIP Account"
	    		      	           && isset($this->account_details['customforms'][$key]['qty'])
	    		      	           && $this->account_details['customforms'][$key]['qty'] == 1) {

	    		      	           $isUpdateRecurringAcc = true;
	    		      	   	       break;
	    		      	   }
	                  }

	        }


	    	if ($isUpdateRecurringAcc === true) {

	    		$total = 3;
		    	if (strtolower($this->account_details['billingcycle']) == "monthly") {
		            // Monthly | 3
		            // TODO fix price
		            $total = 3;
		        } else if (strtolower($this->account_details['billingcycle']) == "annually") {
		           // Annually | 30
		           // TODO fix price
		           $total = 30;
		        }

		        // Update hb_accounts
	            $query = sprintf("
	                                    UPDATE
	                                        %s
	                                    SET
	                                        total='%s'
	                                    WHERE
	                                        id='%s'
	                                    "
	                                    , "hb_accounts"
	                                    , $total
	                                    , $this->account_details['id']
	                     );
	            $db->query($query);


	    	}

//    		return true;

        } elseif (($this->account_details['product_id'] == $vip_cpanel) || ($this->account_details['product_id'] == $vip_apps)) {


        	// Validate ก่อนที่จะทำการ Create Account ต้องตรวจสอบ Certificate ก่อนว่าเรียบร้อยแล้วหรือยัง
	    	$query = sprintf("
	                            SELECT
	                                i.vip_info_cp_apps_id,
	                                i.symantec_connection
	                            FROM
	                                %s i
	                            WHERE
	                                i.account_id='%s'
	                            AND
	                                i.usr_id='%s'
	                            AND
	                                i.symantec_connection='%s'
	                            "
	                            , "hb_vip_info_cp_apps"
	                            , $this->account_details['id']
	                            , $this->account_details['client_id']
	                            , "Success"
	                        );

	         $aRes = $db->query($query)->fetchAll();
	         if (isset($aRes[0]["vip_info_cp_apps_id"]) && isset($aRes[0]["symantec_connection"]) && $aRes[0]["symantec_connection"] == "Success") {
	         } else {
	         	$this->addError("Please upload symantec vip certificate file.");
	         	return false;
	         }


	         // TODO : ให้ PFD check ด้วยว่า ต้องทำอะไรต่อไป


//    		return true;



        }

	$productStatus = $this->account_details['status'];
	if($productStatus == 'Terminated'){
		try {
			require_once HBFDIR_LIBS . 'RvLibs/RvGlobalSoftApi.php';
			$accountId = (isset($this->account_details['id'])) ? $this->account_details['id'] : null;

			$db = hbm_db();
			$vipItemSelect = $db->query("
						SELECT
							vi.vip_info_id
							, vi.vip_user_prefix
							, va.vip_acct_comment
							, va.vip_acct_name
							, usr_id
							, va.vip_acct_id

						FROM
							hb_vip_info AS vi
							, hb_vip_acct AS va
						WHERE
							vi.vip_info_id = va.vip_info_id AND
							vi.account_id = :account_id
							", array(
								':account_id' => $accountId,
					))->fetchall();
			$oAuth =& RvLibs_RvGlobalSoftApi::singleton();

			if(count($vipItemSelect) > 0){
				foreach($vipItemSelect as $k => $v){
					$_SESSION['AppSettings']['login']['user_id_q'] = $v['usr_id'];
					// CREATE VIP ACCT TO SYMANTEC
					$rvapi = $oAuth->request('post', '/vipmanageuser',
                                                array(
                                                        'action_do' => 'addvipacct',
                                                        'vip_acct_name' => $v['vip_acct_name'] ,
                                                        'vip_acct_comment' => $v['vip_acct_comment'],
                                                )
                                        );
					$rvapi = (array) $rvapi;
					if($rvapi['status'] == 'failed' && strpos($rvapi['comment'], 'User already exists.') == null){
						$this->addError($rvapi['comment']);
						return false;
					}

					// CHECK STATUS
					$createVipAcct = $db->query("
									SELECT
							                vip_cred_id
											, vip_cred
							                , vip_cred_comment
							        FROM
							                hb_vip_cred
							        WHERE
							                vip_acct_id = :acctId
							", array(
									':acctId' => $v['vip_acct_id']
							)
					)->fetchall();
					foreach($createVipAcct as $vv){
						// CREATE CREDENTIAL ID FOR VIP ACCT
						$rvapi = $oAuth->request('post', '/vipmanageuser',
                                       						      array(
					                                                        'action_do' => 'addvipcred',
					                                                        'vip_acct_id' =>        $v['vip_acct_id'] ,
					                                                        'vip_cred' => $vv['vip_cred'],
					                                                        'vip_cred_type' => 'STANDARD_OTP',
                                       						      			'vip_cred_comment' => $vv['vip_cred_comment']
					                                                )
			            );
						$rvapi = (array) $rvapi;
						//CHECK STATUS
						if($rvapi['status'] == 'failed' && strpos($rvapi['comment'], 'Operation not allowed in current state of credential.') == null){
							$this->addError($rvapi['comment']);
							return false;
						}
					}
					unset($_SESSION['AppSettings']['login']['user_id_q']);
					$db->query("UPDATE hb_accounts SET notes = '' WHERE id = {$accountId}");
				}
			} else {
				$vipItemSelect = $db->query("
						SELECT
							va.vip_acct_id
							, va.vip_info_cp_apps_id
							, va.vip_acct_name
							, va.vip_acct_comment
							, usr_id
						FROM
							hb_vip_info_cp_apps AS vc
							, hb_vip_acct AS va
						WHERE
							vc.vip_info_cp_apps_id = va.vip_info_cp_apps_id
							AND vc.account_id = :account_id
						", array(
							':account_id' => $accountId
						))->fetchall();

				if(count($vipItemSelect) > 0){
					foreach($vipItemSelect as $k => $v){
						$_SESSION['AppSettings']['login']['user_id_q'] = $v['usr_id'];
						$rvapi = $oAuth->request('post', '/vipmanageuser',
                                                			array(
			                                                        'action_do' => 'addvipacct',
			                                                        'vip_acct_name' =>        $v['vip_acct_name'] ,
			                                                        'vip_acct_comment' => $v['vip_acct_comment'],
			                                                )
	                                        );
						$rvapi = (array) $rvapi;
						if($rvapi['status'] == 'failed' && strpos($rvapi['comment'], 'User already exists.') == null){
							$this->addError($rvapi['comment']);
							return false;
						}

						$v['vip_user_prefix'] = substr($v['vip_acct_name'], 0, strpos($v['vip_acct_name'], '_', 1)+1);
						$createVipAcct = $db->query("
                                                                SELECT
                                                                        vip_cred
                                                                        , cpuser_id
                                                                        , appsuser_id
                                                                        , vip_acct_comment
                                                                        , vip_cred_comment
                                                                        , vip_acct_name
                                                                FROM
                                                                        hb_vip_acct AS va
                                                                        , hb_vip_cred AS vc
                                                                WHERE
                                                                        va.vip_acct_name = '$v[vip_acct_name]' AND
                                                                        vc.vip_acct_id = va.vip_acct_id AND
                                                                        vip_info_cp_apps_id = $v[vip_info_cp_apps_id]
                                                        ")->fetchall();
						foreach($createVipAcct as $kk => $vv){
// CREATE CREDENTIAL ID FOR VIP ACCT
//echo "action_do = 'addcred', vip_acct_id = $v[vip_acct_id], vip_cred = $vv[vip_cred], vip_cred_type = 'STANDARD_OTP', vip_cred_comment = $vv[vip_cred_comment]" . "\n";
							$rvapi = $oAuth->request('post', '/vipmanageuser',
                                       						      array(
					                                                        'action_do' => 'addvipcred',
					                                                        'vip_acct_id' =>        $v['vip_acct_id'] ,
					                                                        'vip_cred' => $vv['vip_cred'],
					                                                        'vip_cred_type' => 'STANDARD_OTP',
												'vip_cred_comment' => $vv['vip_cred_comment']
					                                                )
			                                       );
//CHECK STATUS
						}
						$db->query("UPDATE hb_accounts SET notes = '' WHERE id = {$accountId}");
					}
				}
			}
		} catch(Exception $e){
			$this->addError($e->getMessage());
			return false;
		}
	}
	return true;
    }


    /**
     * This method is invoked automatically when suspending an account.
     * @return boolean true if suspend succeeds
     */
    public function Suspend() {
    	/*
    	$accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;
    	$db = hbm_db();
    	$acctInfo = $db->query("
    				SELECT
    					product_id
    					, date_created
    					, status
    				FROM
    					hb_accounts
    				WHERE
    					id = :accountId
    					AND product_id = 58
    				", array(
    					':accountId' => $accountId
    				)
    	)->fetch();
    	if($acctInfo['product_id'] == '58' && $acctInfo['status'] == 'Active'){
    		$now = strtotime('now');
    		$date_create = strtotime($acctInfo['date_created']);
    		$timeDiff = abs($date_create - $now);
    		$numberDays = intval($timeDiff/86400);
    		if($numberDays >= 45){
    			$this->Terminate();
    			$oAuth =& RvLibs_RvGlobalSoftApi::singleton();
				$response = $oAuth->request('post', '/vipmanageuser',
 													array(
    														'action_do' => 'set_terminate',
 															'account_id' => $accountId
    												)
    			);
				$response = (array) $response;
				$this->addError('before : ' . $response['before'] . ' | after : ' . $response['after']);

				//return false;
    		}
    	}
    	//return true;

    	try {
    		require_once HBFDIR_LIBS . 'RvLibs/RvGlobalSoftApi.php';
    		$accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;

    		$db = hbm_db();
    		$VipItemInfo = $db->query("
    				SELECT
    					vi.vip_info_id AS vip_info_id
    				FROM
    					hb_vip_info AS vi
    				WHERE
						vi.account_id = :account_id
				", array(
    			':account_id' => $accountId,
    		))->fetchall();

    		$oAuth =& RvLibs_RvGlobalSoftApi::singleton();

    		if (count($VipItemInfo) > 0) {
				foreach ($VipItemInfo as $k => $v) {
					$rvapi = $oAuth->request('get', '/VIPUserInfo',
						array(
							'action_do' => 'set_vip_acct_status',
							'vip_info_id' =>	$v['vip_info_id'] ,
							'product' => 'whm',
							'new_acct_status' => 'DISABLED',
						)
					);
				}
    		} else {
    			$VipItemInfo = $db->query("
					SELECT
						vc.vip_info_cp_apps_id AS vip_info_cp_apps_id
					FROM
    					hb_vip_info_cp_apps AS vc
    				WHERE
						vc.account_id = :account_id
				", array(
					':account_id' => $accountId,
				))->fetchall();

				if (count($VipItemInfo) > 0) {
					foreach ($VipItemInfo as $k => $v) {
  						$rvapi = $oAuth->request('get', '/VIPUserInfo',
							array(
								'action_do' => 'set_vip_acct_status',
								'vip_info_id' => $v['vip_info_cp_apps_id'],
								'product' => 'cp/app',
								'new_acct_status' => 'DISABLED',
 							)
						);
					}
				}

    		}
    	} catch(Exception $e) {
           $this->addError($e->getMessage());
           return false;
        }
    	return true;
    	*/
    	return true;
    }


    /**
     * This method is invoked automatically when unsuspending an account.
     * @return boolean true if unsuspend succeeds
     */
    public function Unsuspend() {
    	return true;
    	/*
    	try {
    		require_once HBFDIR_LIBS . 'RvLibs/RvGlobalSoftApi.php';
    		$accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;

    		$db = hbm_db();
    		$VipItemInfo = $db->query("
    				SELECT
    					vi.vip_info_id AS vip_info_id
    				FROM
    					hb_vip_info AS vi
    				WHERE
						vi.account_id = :account_id
				", array(
    			':account_id' => $accountId,
    		))->fetchall();

    		$oAuth =& RvLibs_RvGlobalSoftApi::singleton();

    		if (count($VipItemInfo) > 0) {
				foreach ($VipItemInfo as $k => $v) {
					$rvapi = $oAuth->request('get', '/vipuserinfo',
						array(
							'action_do' => 'set_vip_acct_status',
							'vip_info_id' =>	$v['vip_info_id'],
								'product' => 'whm',
							'new_acct_status' => 'ENABLED',
						)
					);
				}
    		} else {
    		$VipItemInfo = $db->query("
					SELECT
						vc.vip_info_cp_apps_id AS vip_info_cp_apps_id
					FROM
    					hb_vip_info_cp_apps AS vc
    				WHERE
						vc.account_id = :account_id
				", array(
					':account_id' => $accountId,
				))->fetchall();

				if (count($VipItemInfo) > 0) {
					foreach ($VipItemInfo as $k => $v) {
  						$rvapi = $oAuth->request('get', '/vipuserinfo',
							array(
								'action_do' => 'set_vip_acct_status',
								'vip_info_id' => $v['vip_info_cp_apps_id'],
								'product' => 'cp/app',
								'new_acct_status' => 'ENABLED',
 							)
						);
					}
				}
    		}
    	} catch(Exception $e) {
           $this->addError($e->getMessage());
           return false;
        }
    	return true;
    	*/
    }

    /**
     * This method is invoked automatically when terminating an account.
     * @return boolean true if termination succeeds
     */
    public function Terminate() {
    	try {
    		require_once HBFDIR_LIBS . 'RvLibs/RvGlobalSoftApi.php';
    		$accountId = (isset($this->account_details["id"])) ? $this->account_details["id"] : null;

    		$db = hbm_db();
    		$VipItemInfo = $db->query("
    				SELECT
    					va.vip_acct_id AS vip_acct_id
					, usr_id
    				FROM
    					hb_vip_info AS vi,
    					hb_vip_acct AS va
    				WHERE
    					vi.vip_info_id = va.vip_info_id
    					AND vi.account_id = :account_id

				", array(
    			':account_id' => $accountId,
    		))->fetchall();
    		$oAuth =& RvLibs_RvGlobalSoftApi::singleton();

    		if (count($VipItemInfo) > 0) {
				foreach ($VipItemInfo as $k => $v) {
					$_SESSION['AppSettings']['login']['user_id_q'] = $v['usr_id'];
					/// Delete VIP Account
					$rvAddApi = $oAuth->request('post', '/vipmanageuser',
    					array('vip_acct_id' => $v['vip_acct_id'] ,
    						'action_do' => 'deletevipacct'
    					)
    				);
    				$rvAddApi = (array) $rvAddApi;

    				if ($rvAddApi['status'] == 'failed' && strpos($rvAddApi['comment'], 'User does not exist.') == null) {
    					$this->addError("API cannot delete VIP account!!");
					unset($_SESSION['AppSettings']['login']['user_id_q']);
    					return false;
    				} else if(!isset($rvAddApi['status'])){
					unset($_SESSION['AppSettings']['login']['user_id_q']);
					$this->addError("API not working!!");
					return false;
				}
    				/// Delete VIP Account in database

    				/*$delRec = $db->query("
						DELETE FROM
							hb_vip_acct
						WHERE
							vip_acct_id = :vip_acct_id
					", array(
						':vip_acct_id' => $v['vip_acct_id'],
					));*/

				}
				/// Delete VIP Info
				/*$delRec = $db->query("
					DELETE FROM
						hb_vip_info
					WHERE
						account_id = :account_id
					", array(
					':account_id' => $accountId,
				));*/
				$db->query("UPDATE hb_accounts SET notes = '' WHERE id = {$accountId}");
    		} else {
				$VipItemInfo = $db->query("
					SELECT
						va.vip_acct_id AS vip_acct_id
						, va.vip_info_cp_apps_id
						, usr_id
					FROM
						hb_vip_info_cp_apps AS vc,
    					hb_vip_acct AS va
    				WHERE
    					vc.vip_info_cp_apps_id = va.vip_info_cp_apps_id
    					AND vc.account_id = :account_id
				", array(
					':account_id' => $accountId,
				))->fetchall();
				if (count($VipItemInfo) > 0) {
					foreach ($VipItemInfo as $k => $v) {
						$_SESSION['AppSettings']['login']['user_id_q'] = $v['usr_id'];
						/// Delete VIP Account
						$rvAddApi = $oAuth->request('post', '/vipmanageuser',
								array('vip_acct_id' => $v['vip_acct_id'] ,
										'action_do' => 'deletevipacct' ,
										'vip_info_cp_apps_id' => $v['vip_info_cp_apps_id']
								)
						);
						$rvAddApi = (array) $rvAddApi;
						if ($rvAddApi['status'] == 'failed' && strpos($rvAddApi['comment'], 'no user information in database.') == null && strpos($rvAddApi['comment'], 'User does not exist.') == null) {
							unset($_SESSION['AppSettings']['login']['user_id_q']);
							$this->addError("API cannot delete VIP account!!");
							$this->addError($rvAddApi['comment']);
							return false;
						} else if(!isset($rvAddApi['status'])){
							unset($_SESSION['AppSettings']['login']['user_id_q']);
							$this->addError("API not working!!");
							return false;
						}

						/// Delete VIP Account in database
						/*$delRec = $db->query("
							DELETE FROM
								hb_vip_acct
							WHERE
								vip_acct_id = :vip_acct_id
							", array(
								':vip_acct_id' => $v['vip_acct_id'],
						));*/
						$db->query("UPDATE hb_accounts SET notes = '' WHERE id = {$accountId}");
					}
				}
				/*$delRec = $db->query("
					DELETE FROM
						hb_vip_info_cp_apps
					WHERE
						account_id = :account_id
					", array(
						':account_id' => $accountId,
				));*/
    		}
    	} catch(Exception $e) {
    		$this->addError($e->getMessage());
    		return false;
    	}
	unset($_SESSION['AppSettings']['login']['user_id_q']);
// 	$this->createTickets(array());
    	return true;
    }

    public function createTickets($accountList){
//     	if(!class_exists('PHPMailer')){
    		require_once(HBFDIR_LIBS  . 'RvLibs/SSL/PHPMailer-master/class.phpmailer.php');
//     	}
    	echo '<pre>'; print_r(get_declared_classes()); echo '</pre>'; exit;return false;
    	$mail = new PHPMailerNew();
    	$mail->From = 'rvtwofactorteam@rvglobalsoft.com';                       // Sender Email
    	$mail->FromName = 'RV2Factor Team';                                   // Sender Name
    	$mail->AddAddress('rv2factor@tickets.rvglobalsoft.com');                                         // To
    	$mail->Subject = 'Account Terminated';                                  	// Subject
    	//      $mail->AddCC($email_1);                                     	// Cc
    	$mail->Body = '';

    	$mail->ISHTML(true);

    	$mail->Send();
		return true;

		$db = hbm_db();

		$url = 'https://rvglobalsoft.com/7944web/?cmd=accounts&action=edit&id=';
		$content = 'RV2Factor trial account terminated revoke list : <br /><br />';

		$i = 1;
		foreach($accountList as $v){
			$vipCertName = $db->query("
					SELECT
						hvi.certificate_file_name AS whm
						, hvi.account_id AS whm_acct_id
						, hca.certificate_file_name AS cpApp
						, hca.account_id AS cpApp_acct_id
					FROM
						hb_vip_info AS hvi
						, hb_vip_info_cp_apps AS hca
					WHERE
						hvi.account_id = :acctId
						AND hvi.usr_id = hca.usr_id
				", array(
									':acctId' => $v,
							)
			)->fetchAll();
			$content .= $i++ . '. <br /><a href="' . $url . trim($vipCertName[0]['whm_acct_id']) . '" target="_blank">' . trim($vipCertName[0]['whm']) . '</a><br />';
			foreach($vipCertName as $kk => $vv){
				$content .= '<a href="' . $url . trim($vv['cpApp_acct_id']) . '" target="_blank">' . trim($vv['cpApp']) . '</a><br />';
			}
			$content .= '<br />';
		}

// 		$mail = new PHPMailer();
		$mail->From = 'rvtwofactorteam@rvglobalsoft.com';                       // Sender Email
		$mail->FromName = 'RV2Factor Team';                                   // Sender Name
		$mail->AddAddress('rv2factor@tickets.rvglobalsoft.com');                                         // To
		$mail->Subject = 'RV2Factor : Trial product terminated by cron';                                  	// Subject
		//      $mail->AddCC($email_1);                                     	// Cc
		$mail->Body = $content;

		$mail->ISHTML(true);

		$mail->Send();
	}

    /**
     *
     * Enter description here ...
     */
    public function Renewal() {
    	// TODO Renewal.
    	return true;
    }


    /**
     * This method is invoked when account should have password changed
     * @param string $newpassword New password to set account with
     * @return boolean true if action succeeded
     */
    public function ChangePassword($newpassword) {
    	return true;
    }


    /**
     * This method is invoked when account should be upgraded/downgraded
     * $options variable is loaded with new package configuration
     * @return boolean true if action succeeded
     */
    public function ChangePackage() {
    	return true;
    }


    /**
     * Auxilary method that HostBill will load to get plans from server:
     * @see $options variable above
     * @return array - list of plans to display in product configuration
     */
    public function getPlans() {
    	return false;
    }


    /**
     * This method is OPTIONAL. in this example it is used to connect to the server and manage all the modules action with the API.
     *  @ignore
     */
    private function Send($action, $post) {
    	return true;
    }

}
