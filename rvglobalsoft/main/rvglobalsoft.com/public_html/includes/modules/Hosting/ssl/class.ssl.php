<?php
/*************************************************************
 *
* Hosting Module Class - SSL
*
* http://dev.hostbillapp.com/dev-kit/provisioning-modules/
* http://wiki.hostbillapp.com/index.php?title=Custom_Modules#Examples
* http://wiki.hostbillapp.com/index.php?title=Hosting_Modules
* http://hostbillapp.com/features/
* http://wiki.hostbillapp.com/index.php?title=HostBill_Plugins
*
*
************************************************************/


class ssl extends HostingModule {

	private $server_hostname;
	private $server_username;
	private $server_password;

	// Extras >> Plugins >> Hosting Modules
	// Module name
	protected $modname = "SSL";

	// Extras >> Search results
	// Description module
	protected $description = "SSL integration with HostBill. Additionally trough client functions it allows to browse usage graphs generated by Rvglobalsoft.com.";


	// Settings >> Products && Services
	// Connect with App
	protected $options = array();


	/**
	 * You can choose which fields to display in Settings->Apps section
	 * by defining this variable
	 * @var array
	*/
	protected $serverFields = array(
			"hostname" => true,
			"ip" => false,
			"maxaccounts" => false,
			"status_url" => false,
			"username" => false,
			"password" => false,
			"hash" => false,
			"ssl" => false,
			"nameservers" => false
	);

	/**
	 * HostBill will replace default labels for server fields
	 * with this variable configured
	 * @var array
	*/
	protected $serverFieldsDescription = array(
			"hostname" => "Rvglobalsoft Api",
			"username" => "Username",
			"password" => "Password"
	);


	/**
	 * HostBill will call this method before calling any other function from your module
	 * It will pass remote  app details that module should connect with
	 *
	 * @param array $connect Server details configured in Settings->Apps
	*/
	public function connect($connect) {

		$this->server_hostname = (isset($connect["host"])) ? $connect["host"] : "";
		$this->server_username = (isset($connect["username"])) ? $connect["username"] : "";
		$this->server_password = (isset($connect["password"])) ? $connect["password"] : "";
	}


	/**
	 * HostBill will call this method when admin clicks on "test Connection" in settings->apps
	 * It should test connection to remote app using details provided in connect method
	 *
	 * Use $this->addError('message'); to provide errors details (if any)
	 *
	 * http://xxx.xxx.xxx.xxx/public_html/admin/index.php?cmd=servers&action=test_connection
	 *
	 * @see connect
	 * @return boolean true if connection suceeds
	 */
	public function testConnection() {
		// TODO testConnection.
		return true;
	}





	/**
	 * This method is invoked automatically when creating an account.
	 * @return boolean true if creation succeeds
	 */
	public function Create() {
		require_once HBFDIR_LIBS . 'RvLibs/SSL/PHPLibs.php';

		$db = hbm_db();
		$oAuth =& RvLibs_SSL_PHPLibs::singleton();

		$accounts = $this->account_details;
		$orderInfo = $db->query("
				SELECT
					hso.order_id
					, hso.csr
					, hso.email_approval
					, hso.commonname AS domain_name
					, hso.contract AS order_period
					, hso.symantec_status
					, hso.is_renewal
				FROM
					hb_ssl_order AS hso
					, hb_orders AS ho
				WHERE
					ho.id = :orderId
					AND ho.id = hso.order_id
				", array(
					':orderId' => $accounts['order_id']
				)
		)->fetch();
		if(
			(isset($orderInfo['csr']) && $orderInfo['csr'] != '') &&
			(isset($orderInfo['domain_name']) && $orderInfo['domain_name'] != '') &&
			sizeof($orderInfo) > 0
		){
			if($orderInfo['symantec_status'] == 'WAITING_SUBMIT_CSR'){
				$this->addError('Please submit the SSL form below before create Symantec Order.');
				return false;
			}

			$isRenew = ($orderInfo['is_renewal']) ? true : false;
 			$checkState = $oAuth->checkStatus($accounts['order_id'], true, $isRenew);

			$sslorder = $db->query("
					SELECT
						symantec_status
					FROM
						hb_ssl_order
					WHERE
						order_id = :orderId
					", array(
						':orderId' => $accounts['order_id']
					)
			)->fetch();

			if(($accounts['status'] == 'Renewing' || $accounts['status'] == 'Pending') && $checkState && $sslorder['symantec_status'] == 'COMPLETED'){
				return true;
			}
			if($orderInfo['symantec_status'] != $sslorder['symantec_status']){
				header('Location: '.$_SERVER['REQUEST_URI']);
			} else {
				return false;
			}
		}
		if($orderInfo['csr'] == ''){
			$this->addError('Please insert CSR.');
		}
		if($orderInfo['email_approval'] == ''){
			$this->addError('Please select email approval.');
		}
		if($orderInfo['domain_name'] == ''){
			$this->addError('Domain name cannot be null.');
		}
		return false;
	}


	/**
	 * This method is invoked automatically when suspending an account.
	 * @return boolean true if suspend succeeds
	 */
	public function Suspend() {
		// TODO Suspend.
		return true;
	}


	/**
	 * This method is invoked automatically when unsuspending an account.
	 * @return boolean true if unsuspend succeeds
	 */
	public function Unsuspend() {
		// TODO Unsuspend.
		return true;
	}

	/**
	 * This method is invoked automatically when terminating an account.
	 * @return boolean true if termination succeeds
	 */
	public function Terminate() {
		return true;
	}

	/**
	 *
	 * Enter description here ...
	 */
	public function Renewal() {
		// TODO Renewal.
		return true;
	}


	/**
	 * This method is invoked when account should have password changed
	 * @param string $newpassword New password to set account with
	 * @return boolean true if action succeeded
	 */
	public function ChangePassword($newpassword) {
		return true;
	}


	/**
	 * This method is invoked when account should be upgraded/downgraded
	 * $options variable is loaded with new package configuration
	 * @return boolean true if action succeeded
	 */
	public function ChangePackage() {
		return true;
	}


	/**
	 * Auxilary method that HostBill will load to get plans from server:
	 * @see $options variable above
	 * @return array - list of plans to display in product configuration
	 */
	public function getPlans() {
		return false;
	}


	/**
	 * This method is OPTIONAL. in this example it is used to connect to the server and manage all the modules action with the API.
	 *  @ignore
	 */
	private function Send($action, $post) {
		return true;
	}



}