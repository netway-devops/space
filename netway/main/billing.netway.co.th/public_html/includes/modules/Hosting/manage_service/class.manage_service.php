<?php
/*************************************************************
 *
 * Hosting Module Class - Manage Service
 * 
 * @reference
 * http://dev.hostbillapp.com/dev-kit/provisioning-modules/
 * http://wiki.hostbillapp.com/index.php?title=Custom_Modules#Examples
 * http://wiki.hostbillapp.com/index.php?title=Hosting_Modules
 * http://hostbillapp.com/features/
 * http://wiki.hostbillapp.com/index.php?title=HostBill_Plugins
 * 
 * @auther Puttipong Pengprakhon (puttipong at rvglobalsoft.com)
 * 
 ************************************************************/


// Load Hostbill Api
include_once("include/api/class.manage.hostbill.api.php");

// Load Zabbix Api
include_once("include/api/class.manage.zabbix.api.php");


class manage_service extends HostingModule {
    
    private $server_hostname;
    private $server_username;
    private $server_password;

    // Extras >> Plugins >> Hosting Modules
    // Module name
    protected $modname = "Managed Services";
    
    // Extras >> Search results
    // Description module
    protected $description = "Managed Services integration with HostBill. Additionally trough client functions it allows to browse usage graphs, trigger (apache, mysql, raid, nginx, exim, bind, powerdns, memcached and more) generated by Zabbix.";
    
    
    // Settings >> Products && Services
    // Connect with App
    protected $options = array();
    
    
    /**
    * You can choose which fields to display in Settings->Apps section
    * by defining this variable
    * @var array
    */
    protected $serverFields = array(
        "hostname" => true,
        "ip" => false,
        "maxaccounts" => false,
        "status_url" => false,
        "username" => true,
        "password" => true,
        "hash" => false,
        "ssl" => false,
        "nameservers" => false
    );
    
    /**
      * HostBill will replace default labels for server fields
      * with this variable configured
      * @var array
      */
    protected $serverFieldsDescription = array(
        "hostname" => "Zabbix Api",
        "username" => "Username",
        "password" => "Password"
    );
    

    /**
     * HostBill will call this method before calling any other function from your module
     * It will pass remote  app details that module should connect with
     *
     * @param array $connect Server details configured in Settings->Apps
     */
    public function connect($connect) {
        
        $this->server_hostname = (isset($connect["host"])) ? $connect["host"] : "";
        $this->server_username = (isset($connect["username"])) ? $connect["username"] : "";
        $this->server_password = (isset($connect["password"])) ? $connect["password"] : "";
        
    }
    
    
    /**
     * HostBill will call this method when admin clicks on "test Connection" in settings->apps
     * It should test connection to remote app using details provided in connect method
     *
     * Use $this->addError('message'); to provide errors details (if any)
     *
     * http://xxx.xxx.xxx.xxx/public_html/admin/index.php?cmd=servers&action=test_connection
     * 
     * @see connect
     * @return boolean true if connection suceeds
     */
    public function testConnection() {
        $res = false;
        
        try {
            $res = ManageZabbixApi::singleton()->_connect($this->server_hostname, $this->server_username, $this->server_password);
        } catch (Exception $e) {
            $this->addError($e->getMessage());
        }
        
        return $res;
    }
    
    /**
     * This method is invoked automatically when creating an account.
     * @return boolean true if creation succeeds
     */
    public function Create() {
        
        // ขั้นตอนการทำงาน เมื่อ click create manage_service app
        // 1. บน zabbix: สร้าง action [a-__hb_account_id__-*]
        // 2. บน zabbix: add host group 'Managed Services Host Group'
        
        $request = array(
           "server_hostname" => $this->server_hostname,
           "server_username" => $this->server_username,
           "server_password" => $this->server_password,
           "account_id" => $this->account_details["id"],
           "client_id" => $this->client_data["id"]
        );
        $aResponse = ManageServiceCommon::singleton()->doCreateManageService($request);
        if (isset($aResponse['raiseError']) && $aResponse['raiseError'] != "") {
            $this->addError($aResponse['raiseError']);
             return false;
        }
        
        return true;
    }
    
    
    /**
     * This method is invoked automatically when suspending an account.
     * @return boolean true if suspend succeeds
     */
    public function Suspend() {
        return true;
    }
    
    
    /**
     * This method is invoked automatically when unsuspending an account.
     * @return boolean true if unsuspend succeeds
     */
    public function Unsuspend() {
        return true;
    }
    
    /**
     * This method is invoked automatically when terminating an account.
     * @return boolean true if termination succeeds
     */
    public function Terminate() {
            
        // ขั้นตอนการทำงาน 
        // 1. บน zabbix: ถ้ามี action [a-__hb_account_id__-*] ให้ delete ยกเว้น [a-__hb_account_id__-ping]
        // 2. ลบ host group 'Managed Services Host Group'
            
        $request = array(
           "server_hostname" => $this->server_hostname,
           "server_username" => $this->server_username,
           "server_password" => $this->server_password,
           "account_id" => $this->account_details['id']
        );
        $aResponse = ManageServiceCommon::singleton()->doCleanManageService($request);
        if (isset($aResponse['raiseError']) && $aResponse['raiseError'] != '') {
            $this->addError($aResponse['raiseError']);
            return false;
        }
        
        return true;
    }
    
    
    /**
     * This method is invoked when account should have password changed
     * @param string $newpassword New password to set account with
     * @return boolean true if action succeeded
     */
    public function ChangePassword($newpassword) {
        return true;
    }
    
    
    /**
     * This method is invoked when account should be upgraded/downgraded
     * $options variable is loaded with new package configuration
     * @return boolean true if action succeeded
     */
    public function ChangePackage() {
        return true;
    }
    
    
    /**
     * Auxilary method that HostBill will load to get plans from server:
     * @see $options variable above
     * @return array - list of plans to display in product configuration
     */
    public function getPlans() {
        return true;
    }
    
    
    /**
     * This method is OPTIONAL. in this example it is used to connect to the server and manage all the modules action with the API.
     *  @ignore
     */
    private function Send($action, $post) {
        return true;
    }
    
    
}